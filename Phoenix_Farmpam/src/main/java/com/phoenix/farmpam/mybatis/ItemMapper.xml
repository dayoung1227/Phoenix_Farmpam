<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="item">

	<!-- 상품 목록 -->
	<select id="getListItem" resultType="itemDto" parameterType="itemDto">
			SELECT *
			FROM
			(SELECT result1.*, ROWNUM AS rnum
			FROM
				(SELECT item_idx, item_image, item_title, item_content, item_price, item_stock, farmer_email
				FROM item
				WHERE farmer_email=#{farmer_email }
				<choose>
					<when test="item_title != null">
						WHERE item_title LIKE '%'||#{item_title}||'%'
					</when>
				</choose>
			ORDER BY item_stock) result1)
		<![CDATA[ 
		WHERE rnum >= #{startRowNum} AND rnum <= #{endRowNum}
		]]>
	</select>

	<select id="getCount" parameterType="itemDto" resultType="int">
		SELECT NVL(MAX(ROWNUM),0)
		FROM item
		<choose>
			<when test="item_title != null">
				WHERE item_title LIKE '%'||#{item_title}||'%'
			</when>
		</choose>
	</select>
	
	<select id="getData3" parameterType="int" resultType="itemDto">
		SELECT farmer_email, item_idx, item_title, item_price, item_stock, item_category_top_idx, item_content, item_image
		FROM item
		WHERE item_idx=#{item_idx }
	</select>
	
	<insert id="insertItem" parameterType="itemDto">
		INSERT INTO item
		(item_idx, farmer_email, item_title, item_price, item_stock, item_content, item_image)
		VALUES(item_seq.NEXTVAL, #{farmer_email}, #{item_title}, #{item_price}, #{item_stock}, #{item_content}, #{item_image})
	</insert>
	
	<delete id="delete" parameterType="int">
		DELETE FROM item
		WHERE item_idx=#{item_idx}
	</delete>
	
	<update id="update" parameterType="itemDto">
		UPDATE item
		SET item_image=#{item_image}, item_title=#{item_title}, item_content=#{item_content}, item_price=#{item_price}, item_stock=#{item_stock}
		WHERE item_idx=#{item_idx}
	</update>
	
	<!-- 상품 가격 가져오기 -->
	<select id="getPrice" parameterType="int" resultType="int">
		SELECT item_price
		FROM item
		WHERE item_idx=#{item_idx}
	</select>
	
	<!-- 계좌 잔고 줄이기 -->
	<update id="minusMoney" parameterType="itemDto">
		UPDATE new_users
		SET users_account=users_account-#{item_price}
		WHERE users_email=#{users_email}
	</update>
	
	<!-- 상품 재고 1 감소시키기 -->
	<update id="minusStock" parameterType="itemDto">
		UPDATE item
		SET item_stock=item_stock-#{orders_item_total}
		WHERE item_idx=#{item_idx}
	</update>
	
	<!-- 주문 테이블에 주문 정보 추가 -->
	<insert id="addOrders" parameterType="ordersDto">
		INSERT INTO orders
		(orders_idx, users_email, orders_price, orders_regdate, orders_item_total, orders_addr, item_idx, item_price)
		VALUES(orders_seq.NEXTVAL, #{users_email}, #{orders_price}, SYSDATE, #{orders_item_total}, #{orders_addr}, #{item_idx}, #{item_price})
	</insert>

	<sql id="searchCondition">
		<choose>
			<when test="item_title != null and item_content != null">
				WHERE item_title LIKE '%'||#{item_title}||'%' 
				OR item_content LIKE '%'||#{item_content}||'%'
			</when>
			<when test="item_title != null">
				WHERE item_title LIKE '%'||#{item_title}||'%'
			</when>
		</choose>
	</sql>
	
	<select id="getList" parameterType="itemDto" resultType="itemDto">
        select result2.* from 
        (select result1.* , rownum as rnum from 
        (SELECT item_idx, item_title, item_price, item_content, item_image, item_category_top_idx, item_category_top_ref FROM item 
            <choose>
                <when test="item_category_top_ref != 0 and item_category_top_idx != 0"> 
                    WHERE item_category_top_ref = #{item_category_top_ref} and item_category_top_idx = #{item_category_top_idx}
                </when>
                <when test="item_category_top_idx != 0">
                    WHERE item_category_top_idx = #{item_category_top_idx}
                </when>
                <when test="item_category_top_ref != 0"> 
                    WHERE item_category_top_ref = #{item_category_top_ref}
                </when>
            </choose>
     ) result1 
     <include refid="searchCondition"/>
     order by item_idx desc) result2  WHERE rnum between #{startRowNum} AND #{endRowNum}
    </select>
	
	<update id="minusCount" parameterType="int">
		UPDATE item
		SET item_stock=item_stock-1
		where item_idx=#{item_idx}
	</update>
	
	<select id="getData" parameterType="int" resultType="itemDto"> 
		SELECT result1.*
		FROM item
			(SELECT item_idx,item_title, item_price,item_stock,item_content, item_image, farmer_email,
				LAG(item_idx,1,0) OVER (ORDER BY item_idx DESC) AS prevNum,
				LEAD(item_idx,1,0) OVER (ORDER BY item_idx DESC) AS nextNum
			FROM item) result1
		WHERE item_idx=#{item_idx}
	</select>
	
	<select id="getData2" parameterType="itemDto" resultType="itemDto">
		SELECT result1.*
		FROM
			(SELECT item_idx, item_title, item_price,item_stock, item_content, item_image, farmer_email,
				LAG(item_idx,1,0) OVER (ORDER BY item_idx DESC) AS prevNum,
				LEAD(item_idx,1,0) OVER (ORDER BY item_idx DESC) AS nextNum
			FROM item
			<include refid="searchCondition"/>
			) result1
		WHERE item_idx=#{item_idx}	
	</select>
	
</mapper>